package predictive;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DictionaryListImpl implements Dictionary {
	private List<WordSig> list;
	private String scurrent;

	public DictionaryListImpl() {
		list = new ArrayList<WordSig>();
		BufferedReader dictionaryReader;
		try {
			 dictionaryReader = new BufferedReader(new
			 FileReader("/usr/share/dict/words"));// code for commandline
			//dictionaryReader = new BufferedReader(new FileReader("words"));
			String scurrent = dictionaryReader.readLine();
			while (scurrent != null)// until the end of the dictionary file has
									// not been reached
			{
				if (isValidWord(scurrent)) {
					WordSig word = new WordSig(wordToSignature(scurrent),
							scurrent);
					list.add(word);

				}
				scurrent = dictionaryReader.readLine();

			}
			Collections.sort(list);
			dictionaryReader.close();// closes the file that contains the
										// dictionary
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}// opens the file that contains the dictionary
		catch (IOException e) {
			e.printStackTrace();
		}

	}

	public List<WordSig> getList() {
		return list;
	}

	public void setList(ArrayList<WordSig> list) {
		this.list = list;
	}

	public boolean isValidWord(String word) {
		for (int i = 0; i < word.length(); i++) {
			if (word.charAt(i) < 'a' || word.charAt(i) > 'z')
				return false;

		}
		return true;

	}

	public String wordToSignature(String word) {
		String s = new String();

		for (int i = 0; i < word.length(); i++) {

			switch (word.charAt(i))// for each of the letters in the word it
									// concatenates the right number to s
			{
			case 'a':
			case 'b':
			case 'c':
				s = s + "2";
				break;
			case 'd':
			case 'e':
			case 'f':
				s = s + "3";
				break;
			case 'g':
			case 'h':
			case 'i':
				s = s + "4";
				break;
			case 'j':
			case 'k':
			case 'l':
				s = s + "5";
				break;
			case 'm':
			case 'n':
			case 'o':
				s = s + "6";
				break;
			case 'p':
			case 'q':
			case 'r':
			case 's':
				s = s + "7";
				break;
			case 't':
			case 'u':
			case 'v':
				s = s + "8";
				break;
			case 'w':
			case 'x':
			case 'y':
			case 'z':
				s = s + "9";
				break;
			default:
				s = s + " ";
			}

		}

		return s;
	}

	public Set<String> signatureToWords(String signature) {
		Set<String> same = new HashSet<String>();

		int i = Collections.binarySearch(list, new WordSig(signature, null));
		int copy = i;
		if (i > 0 && i < list.size()) {
			same.add(list.get(i).getWords());
			i--;
			while (list.get(i).getSignature().equals(signature)) {
				if(i > 0 && i < list.size()){
				same.add(list.get(i).getWords());
				i--;
				}
				else break;
			}
			i = copy;
			i++;
			while (list.get(i).getSignature().equals(signature)) {
				if(i > 0 && i < list.size()){
				same.add(list.get(i).getWords());
				i++;
				}
				else break;
			}

		}
		return same;

	}
	//115 words : 3445 milliseconds

}
